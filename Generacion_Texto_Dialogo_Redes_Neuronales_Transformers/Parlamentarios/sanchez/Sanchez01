{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"machine_shape":"hm","gpuType":"L4","authorship_tag":"ABX9TyOXtsuAItPNYFOtmhWBNeY7"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"hgg2bqrQIwSf","outputId":"911776ff-340a-43b9-aedc-7cf75a5619aa","executionInfo":{"status":"ok","timestamp":1733183898322,"user_tz":-60,"elapsed":4145035,"user":{"displayName":"Manuel Martínez","userId":"08448404517484227142"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Por favor, sube el archivo de texto (.txt) con las intervenciones:\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-9401daba-20ca-497f-9f7b-b53602915131\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-9401daba-20ca-497f-9f7b-b53602915131\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving intervencionesSanchez.txt to intervencionesSanchez (5).txt\n","Epoch 1/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m87s\u001b[0m 90ms/step - loss: 2.9409\n","Epoch 2/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 2.2916\n","Epoch 3/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 2.1484\n","Epoch 4/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 2.0514\n","Epoch 5/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.9682\n","Epoch 6/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.9099\n","Epoch 7/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.8390\n","Epoch 8/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.7776\n","Epoch 9/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.7241\n","Epoch 10/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.6797\n","Epoch 11/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.6354\n","Epoch 12/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.5932\n","Epoch 13/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.5599\n","Epoch 14/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.5307\n","Epoch 15/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.4967\n","Epoch 16/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.4664\n","Epoch 17/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.4396\n","Epoch 18/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.4152\n","Epoch 19/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.3921\n","Epoch 20/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.3709\n","Epoch 21/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.3483\n","Epoch 22/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.3286\n","Epoch 23/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.3047\n","Epoch 24/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.2929\n","Epoch 25/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.2753\n","Epoch 26/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.2589\n","Epoch 27/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.2452\n","Epoch 28/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.2277\n","Epoch 29/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.2123\n","Epoch 30/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.1988\n","Epoch 31/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.1862\n","Epoch 32/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.1758\n","Epoch 33/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.1721\n","Epoch 34/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.1552\n","Epoch 35/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.1467\n","Epoch 36/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.1354\n","Epoch 37/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.1223\n","Epoch 38/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.1170\n","Epoch 39/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.1015\n","Epoch 40/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.0930\n","Epoch 41/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.0897\n","Epoch 42/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.0811\n","Epoch 43/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.0653\n","Epoch 44/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.0615\n","Epoch 45/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.0558\n","Epoch 46/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.0530\n","Epoch 47/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.0429\n","Epoch 48/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.0316\n","Epoch 49/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.0259\n","Epoch 50/50\n","\u001b[1m912/912\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 90ms/step - loss: 1.0197\n","Introduce un texto inicial para generar:Casado dice usted que\n","\n","Texto generado:\n","                                                                                asado dice usted que está es alguna el partido popular en el consejo de españa esta contra de la constitución de la constitución española y estamos haciendo estamos hacie\n"]}],"source":["# Importar librerías necesarias\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.layers import (\n","    Input, Embedding, Bidirectional, LSTM, Dense, Dropout\n",")\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.callbacks import ModelCheckpoint\n","from tensorflow.keras.utils import to_categorical\n","import os\n","from google.colab import files\n","import re\n","\n","# Pedir al usuario que suba el archivo .txt\n","print(\"Por favor, sube el archivo de texto (.txt) con las intervenciones:\")\n","uploaded = files.upload()\n","\n","# Cargar el archivo\n","filename = list(uploaded.keys())[0]\n","with open(filename, 'r', encoding='utf-8') as file:\n","    text = file.read()\n","\n","# Preprocesamiento del texto\n","def preprocess_text(text):\n","    text = text.lower()\n","    text = re.sub(r'[^\\w\\s]', '', text)\n","    text = re.sub(r'\\s+', ' ', text).strip()\n","    return text\n","\n","processed_text = preprocess_text(text)\n","\n","# Crear vocabulario y asignar índices\n","chars = sorted(list(set(processed_text)))\n","char_to_index = {char: idx for idx, char in enumerate(chars)}\n","index_to_char = {idx: char for char, idx in char_to_index.items()}\n","\n","# Parámetros del modelo\n","sequence_length = 100\n","step = 1\n","\n","# Generar datos de entrada y salida\n","sequences = []\n","next_chars = []\n","for i in range(0, len(processed_text) - sequence_length, step):\n","    sequences.append(processed_text[i: i + sequence_length])\n","    next_chars.append(processed_text[i + sequence_length])\n","\n","X = np.zeros((len(sequences), sequence_length), dtype=np.int32)\n","y = np.zeros((len(sequences), len(chars)), dtype=np.float32)\n","\n","for i, seq in enumerate(sequences):\n","    X[i] = [char_to_index[char] for char in seq]\n","    y[i, char_to_index[next_chars[i]]] = 1\n","\n","# Crear modelo RNN con BiLSTM\n","def create_model(vocab_size, seq_len):\n","    inputs = Input(shape=(seq_len,))\n","    embedding = Embedding(input_dim=vocab_size, output_dim=256)(inputs)  # Dimensión aumentada\n","    bilstm = Bidirectional(LSTM(256, return_sequences=True, dropout=0.4))(embedding)\n","    bilstm = Bidirectional(LSTM(256, return_sequences=True, dropout=0.4))(bilstm)\n","    bilstm_final = Bidirectional(LSTM(256, return_sequences=False, dropout=0.4))(bilstm)\n","    dense = Dense(256, activation='relu')(bilstm_final)\n","    outputs = Dense(vocab_size, activation='softmax')(dense)\n","    model = Model(inputs, outputs)\n","    return model\n","\n","model = create_model(len(chars), sequence_length)\n","optimizer = Adam(learning_rate=0.0001)\n","model.compile(optimizer=optimizer, loss='categorical_crossentropy')\n","\n","# Callback para guardar el modelo periódicamente\n","checkpoint = ModelCheckpoint(\n","    filepath=\"modelo_BiLSTM_parlamentarioSanchez_extensivo.keras\",\n","    monitor=\"loss\",\n","    save_best_only=True,\n","    save_weights_only=False,\n",")\n","\n","# Entrenamiento del modelo\n","batch_size = 256  # Ajustado para mayor velocidad en hardware potente\n","epochs = 50       # Mayor número de épocas para un modelo más entrenado\n","\n","model.fit(X, y, batch_size=batch_size, epochs=epochs, callbacks=[checkpoint])\n","\n","# Guardar el modelo entrenado\n","model.save(\"modelo_BiLSTM_parlamentarioSanchez_extensivo_final.keras\")\n","\n","# Función para limpiar texto inicial\n","def clean_seed_text(seed_text, valid_chars):\n","    return ''.join([char if char in valid_chars else ' ' for char in seed_text])\n","\n","# Función para generar texto\n","def generate_text(model, seed_text, length, char_to_index, index_to_char, seq_len):\n","    generated_text = seed_text\n","    for _ in range(length):\n","        input_seq = [char_to_index.get(char, 0) for char in generated_text[-seq_len:]]\n","        input_seq = np.expand_dims(input_seq, axis=0)\n","        preds = model.predict(input_seq, verbose=0)[0]\n","        next_char = index_to_char[np.argmax(preds)]\n","        generated_text += next_char\n","    return generated_text\n","\n","# Solicitar texto inicial para generación\n","seed_text = input(\"Introduce un texto inicial para generar:\")\n","seed_text = clean_seed_text(seed_text, chars)\n","\n","if len(seed_text) < sequence_length:\n","    seed_text = ' ' * (sequence_length - len(seed_text)) + seed_text\n","\n","# Generar texto\n","generated = generate_text(\n","    model, seed_text, length=150,\n","    char_to_index=char_to_index,\n","    index_to_char=index_to_char,\n","    seq_len=sequence_length\n",")\n","\n","print(\"\\nTexto generado:\")\n","print(generated)\n"]}]}