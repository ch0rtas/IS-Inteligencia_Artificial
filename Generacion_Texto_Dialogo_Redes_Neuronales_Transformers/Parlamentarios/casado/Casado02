{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMJ3SRINdQnWIpFFOdBgNgs"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"gs5nqnnLZGLn","executionInfo":{"status":"ok","timestamp":1732724335058,"user_tz":-60,"elapsed":314032,"user":{"displayName":"Manuel Martínez","userId":"08448404517484227142"}},"outputId":"b69da2ed-8782-4112-9d8e-91b5862293e1"},"outputs":[{"output_type":"stream","name":"stdout","text":["Por favor, sube el archivo .txt con las intervenciones del parlamentario.\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-f1faed8b-96a8-4e23-b05f-978387ea01dc\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-f1faed8b-96a8-4e23-b05f-978387ea01dc\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving intervencionesCasado.txt to intervencionesCasado.txt\n","Entrenando el modelo...\n","Epoch 1/20\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/layers/core/embedding.py:90: UserWarning: Argument `input_length` is deprecated. Just remove it.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m286/286\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 38ms/step - accuracy: 0.0423 - loss: 7.1399\n","Epoch 2/20\n","\u001b[1m286/286\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 34ms/step - accuracy: 0.0497 - loss: 6.1544\n","Epoch 3/20\n","\u001b[1m286/286\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 31ms/step - accuracy: 0.0574 - loss: 5.9885\n","Epoch 4/20\n","\u001b[1m286/286\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 31ms/step - accuracy: 0.0666 - loss: 5.8999\n","Epoch 5/20\n","\u001b[1m286/286\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 29ms/step - accuracy: 0.0763 - loss: 5.7353\n","Epoch 6/20\n","\u001b[1m286/286\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 29ms/step - accuracy: 0.0871 - loss: 5.5671\n","Epoch 7/20\n","\u001b[1m286/286\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 31ms/step - accuracy: 0.1045 - loss: 5.3852\n","Epoch 8/20\n","\u001b[1m286/286\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 30ms/step - accuracy: 0.1178 - loss: 5.2005\n","Epoch 9/20\n","\u001b[1m286/286\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 27ms/step - accuracy: 0.1346 - loss: 4.9931\n","Epoch 10/20\n","\u001b[1m286/286\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 33ms/step - accuracy: 0.1446 - loss: 4.8524\n","Epoch 11/20\n","\u001b[1m286/286\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 31ms/step - accuracy: 0.1624 - loss: 4.6539\n","Epoch 12/20\n","\u001b[1m286/286\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 26ms/step - accuracy: 0.1705 - loss: 4.5177\n","Epoch 13/20\n","\u001b[1m286/286\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 31ms/step - accuracy: 0.1899 - loss: 4.3223\n","Epoch 14/20\n","\u001b[1m286/286\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 31ms/step - accuracy: 0.2021 - loss: 4.1737\n","Epoch 15/20\n","\u001b[1m286/286\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 26ms/step - accuracy: 0.2237 - loss: 4.0115\n","Epoch 16/20\n","\u001b[1m286/286\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 33ms/step - accuracy: 0.2338 - loss: 3.8435\n","Epoch 17/20\n","\u001b[1m286/286\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 30ms/step - accuracy: 0.2573 - loss: 3.6926\n","Epoch 18/20\n","\u001b[1m286/286\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 30ms/step - accuracy: 0.2759 - loss: 3.5299\n","Epoch 19/20\n","\u001b[1m286/286\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 33ms/step - accuracy: 0.2929 - loss: 3.4125\n","Epoch 20/20\n","\u001b[1m286/286\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 27ms/step - accuracy: 0.3229 - loss: 3.2614\n","¡Puedes comenzar a interactuar con el modelo!\n","Introduce el inicio del texto (o escribe 'salir' para terminar): Dice usted\n","Respondiendo...\n","Dice usted ha cae la realidad lo que se está en la socios que ha deslealtad y que estamos y contra la pasado tiene que peones y de la familia que es españoles lo que hay españoles le pensiones los españoles que nuevo usted por el gobierno lo de los españoles usted\n","Introduce el inicio del texto (o escribe 'salir' para terminar): Sigue con las mentiras\n","Respondiendo...\n","Sigue con las mentiras de que les hago la unión europea en 100 millones de euros y de que esa leído el estado que le importa el qué no hemos crecido el estado de todos las 130 polos y en los que les dijo que no voy a hacer la sombra de las pensiones\n","Introduce el inicio del texto (o escribe 'salir' para terminar): Está hundiendo la\n","Respondiendo...\n","Está hundiendo la pensiones que usted ha leído el estado todo la de la señor sánchez o con la democracia por el partido millones de la democracia y el gobierno con su gobierno veces por gestión que su estado de ustedes por su partido nacional que piden españoles españoles y porque la libertad\n","Introduce el inicio del texto (o escribe 'salir' para terminar): salir\n","¡Hasta luego!\n"]}],"source":["# Importar librerías necesarias\n","import tensorflow as tf\n","from tensorflow.keras.layers import Embedding, LSTM, Dense\n","from tensorflow.keras.models import Sequential\n","import numpy as np\n","import os\n","\n","# Solicitar el archivo txt al usuario\n","from google.colab import files\n","\n","print(\"Por favor, sube el archivo .txt con las intervenciones del parlamentario.\")\n","uploaded = files.upload()\n","\n","# Leer el archivo .txt\n","filename = list(uploaded.keys())[0]\n","with open(filename, 'r', encoding='utf-8') as file:\n","    text = file.read()\n","\n","# Preprocesamiento del texto\n","def preprocess_text(text):\n","    text = text.lower()  # Convertir a minúsculas\n","    text = text.replace('\\n', ' ')  # Reemplazar saltos de línea por espacios\n","    text = ''.join(c for c in text if c.isalnum() or c.isspace())  # Eliminar puntuación\n","    return text\n","\n","text = preprocess_text(text)\n","words = text.split()  # Dividir el texto en palabras únicas\n","vocab = sorted(set(words))  # Crear vocabulario único\n","\n","# Crear diccionarios de mapeo\n","word_to_idx = {word: i for i, word in enumerate(vocab)}\n","idx_to_word = {i: word for word, i in word_to_idx.items()}\n","\n","# Convertir el texto a índices\n","encoded_text = [word_to_idx[word] for word in words]\n","\n","# Preparar los datos para el modelo\n","sequence_length = 5\n","X = []\n","y = []\n","\n","for i in range(len(encoded_text) - sequence_length):\n","    X.append(encoded_text[i:i+sequence_length])\n","    y.append(encoded_text[i+sequence_length])\n","\n","X = np.array(X)\n","y = np.array(y)\n","\n","# Construir el modelo LSTM\n","vocab_size = len(vocab)\n","embedding_dim = 64\n","lstm_units = 128\n","\n","model = Sequential([\n","    Embedding(vocab_size, embedding_dim, input_length=sequence_length),\n","    LSTM(lstm_units, return_sequences=False),\n","    Dense(vocab_size, activation='softmax')\n","])\n","\n","model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","# Entrenar el modelo\n","print(\"Entrenando el modelo...\")\n","model.fit(X, y, epochs=20, batch_size=64, verbose=1)\n","\n","# Función para generar texto con temperatura\n","def generate_text(model, start_sequence, max_words=50, temperature=1.0):\n","    input_sequence = [word_to_idx[word] for word in start_sequence.split() if word in word_to_idx]\n","    generated = start_sequence\n","\n","    for _ in range(max_words):\n","        input_padded = tf.keras.preprocessing.sequence.pad_sequences([input_sequence], maxlen=sequence_length)\n","        predictions = model.predict(input_padded, verbose=0).flatten()\n","        predictions = np.log(predictions + 1e-9) / temperature\n","        probabilities = np.exp(predictions) / np.sum(np.exp(predictions))\n","        predicted_idx = np.random.choice(len(probabilities), p=probabilities)\n","        predicted_word = idx_to_word[predicted_idx]\n","\n","        generated += ' ' + predicted_word\n","        input_sequence.append(predicted_idx)\n","        input_sequence = input_sequence[1:]\n","\n","        # Finalizar si se alcanza un final lógico\n","        if predicted_word in ['.', '!', '?']:\n","            break\n","\n","    return generated\n","\n","# Interactuar con el modelo sin preguntar la longitud\n","print(\"¡Puedes comenzar a interactuar con el modelo!\")\n","while True:\n","    prompt = input(\"Introduce el inicio del texto (o escribe 'salir' para terminar): \")\n","    if prompt.lower() == 'salir':\n","        print(\"¡Hasta luego!\")\n","        break\n","    print(\"Respondiendo...\")\n","    print(generate_text(model, prompt, max_words=50, temperature=0.8))\n"]}]}