{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"machine_shape":"hm","gpuType":"A100","authorship_tag":"ABX9TyO0QDfOjbAdhsQocPJTOee6"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"3aZKbL7vJnHc","outputId":"64031093-d9cc-4dca-d926-605b67c7ec14"},"outputs":[{"output_type":"stream","name":"stdout","text":["Por favor, sube el archivo .txt con las intervenciones del parlamentario.\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-d595fb8f-aa3d-4f38-8be7-150a433e7e35\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-d595fb8f-aa3d-4f38-8be7-150a433e7e35\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving intervencionesCasado.txt to intervencionesCasado.txt\n","Entrenando el modelo... Esto puede tardar un rato.\n","Epoch 1/50\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/layers/core/embedding.py:90: UserWarning: Argument `input_length` is deprecated. Just remove it.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 9ms/step - accuracy: 0.0390 - loss: 7.0096\n","Epoch 2/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - accuracy: 0.0603 - loss: 6.1778\n","Epoch 3/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.0822 - loss: 5.7878\n","Epoch 4/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.1129 - loss: 5.3313\n","Epoch 5/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.1584 - loss: 4.6496\n","Epoch 6/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.2133 - loss: 3.9182\n","Epoch 7/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.3260 - loss: 3.1032\n","Epoch 8/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.4811 - loss: 2.3585\n","Epoch 9/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.6004 - loss: 1.7994\n","Epoch 10/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.6917 - loss: 1.4022\n","Epoch 11/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.7667 - loss: 1.0603\n","Epoch 12/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.8285 - loss: 0.8181\n","Epoch 13/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.8878 - loss: 0.6046\n","Epoch 14/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.9264 - loss: 0.4398\n","Epoch 15/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.9500 - loss: 0.3352\n","Epoch 16/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.9718 - loss: 0.2370\n","Epoch 17/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.9836 - loss: 0.1756\n","Epoch 18/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.9909 - loss: 0.1291\n","Epoch 19/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.9941 - loss: 0.1000\n","Epoch 20/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.9963 - loss: 0.0795\n","Epoch 21/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.9973 - loss: 0.0635\n","Epoch 22/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.9988 - loss: 0.0502\n","Epoch 23/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.9996 - loss: 0.0413\n","Epoch 24/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.9994 - loss: 0.0364\n","Epoch 25/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.9993 - loss: 0.0316\n","Epoch 26/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.9995 - loss: 0.0291\n","Epoch 27/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.9985 - loss: 0.0273\n","Epoch 28/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.9992 - loss: 0.0256\n","Epoch 29/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.9992 - loss: 0.0252\n","Epoch 30/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9990 - loss: 0.0238\n","Epoch 31/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9989 - loss: 0.0256\n","Epoch 32/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9972 - loss: 0.0353\n","Epoch 33/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9844 - loss: 0.0891\n","Epoch 34/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9267 - loss: 0.2965\n","Epoch 35/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9232 - loss: 0.3013\n","Epoch 36/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9696 - loss: 0.1414\n","Epoch 37/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9866 - loss: 0.0714\n","Epoch 38/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9951 - loss: 0.0403\n","Epoch 39/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.9981 - loss: 0.0252\n","Epoch 40/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.9987 - loss: 0.0180\n","Epoch 41/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.9988 - loss: 0.0142\n","Epoch 42/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.9997 - loss: 0.0112\n","Epoch 43/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.9995 - loss: 0.0106\n","Epoch 44/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.9997 - loss: 0.0082\n","Epoch 45/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9994 - loss: 0.0082\n","Epoch 46/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.9999 - loss: 0.0069\n","Epoch 47/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.9996 - loss: 0.0063\n","Epoch 48/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9998 - loss: 0.0058\n","Epoch 49/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9997 - loss: 0.0063\n","Epoch 50/50\n","\u001b[1m143/143\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - accuracy: 0.9995 - loss: 0.0069\n","¡Puedes comenzar a interactuar con el modelo!\n","Introduce el inicio del texto (o escribe 'salir' para terminar): Sánchez es usted\n","Respondiendo...\n","Sánchez es usted aunque cómo ocultar españa del cni de helicóptero de ocultar no para ocultar la situación de liquidez y que mandó el consejo de seguridad nacional de ocultar la pandemia de seguridad nacional de ocultar la cifra de helicóptero de contagiados que los fondos europeos la cifra de tezanos de todos los españoles que ha muerto no ha conseguido no convoca de seguridad nacional de ocultar la situación que ha advertido que se reclamando a seguridad del regresado que ha muerto de pandemia sin que atentan de censura usted de cargos y sube la pandemia de helicóptero de cambio de los\n","Introduce el inicio del texto (o escribe 'salir' para terminar): Mi candidatura se basa en\n","Respondiendo...\n","Mi candidatura se basa en el sueldo de las cuentas en contagiados que ha agravante que tiene muertos que ha muerto sin alta del gobierno que helicóptero de ocultar la monarquía de contagiados de contagiados de contagiados y que solo ha conseguido no convoca de seguridad nacional de ocultar un millón de tomarnos el cis de helicóptero de ocultar esto que ha usado para helicóptero de venían a contagiados de seguridad europea quedamos solo no ha recuperado la pandemia de ocultar la situación de seguridad nacional de ocultar esto que ha muerto no ha paralizado que ha usado con el sueldo de las alertas que\n"]}],"source":["# Importar librerías necesarias\n","import tensorflow as tf\n","from tensorflow.keras.layers import Embedding, GRU, Dense, Dropout\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.callbacks import ModelCheckpoint\n","import numpy as np\n","import os\n","\n","# Solicitar el archivo txt al usuario\n","from google.colab import files\n","\n","print(\"Por favor, sube el archivo .txt con las intervenciones del parlamentario.\")\n","uploaded = files.upload()\n","\n","# Leer el archivo .txt\n","filename = list(uploaded.keys())[0]\n","with open(filename, 'r', encoding='utf-8') as file:\n","    text = file.read()\n","\n","# Preprocesamiento del texto\n","def preprocess_text(text):\n","    text = text.lower()  # Convertir a minúsculas\n","    text = text.replace('\\n', ' ')  # Reemplazar saltos de línea por espacios\n","    text = ''.join(c for c in text if c.isalnum() or c.isspace())  # Eliminar puntuación\n","    return text\n","\n","text = preprocess_text(text)\n","words = text.split()  # Dividir el texto en palabras únicas\n","vocab = sorted(set(words))  # Crear vocabulario único\n","\n","# Crear diccionarios de mapeo\n","word_to_idx = {word: i for i, word in enumerate(vocab)}\n","idx_to_word = {i: word for word, i in word_to_idx.items()}\n","\n","# Convertir el texto a índices\n","encoded_text = [word_to_idx[word] for word in words]\n","\n","# Preparar los datos para el modelo\n","sequence_length = 10  # Ajustar la longitud de las secuencias\n","X = []\n","y = []\n","\n","for i in range(len(encoded_text) - sequence_length):\n","    X.append(encoded_text[i:i+sequence_length])\n","    y.append(encoded_text[i+sequence_length])\n","\n","X = np.array(X)\n","y = np.array(y)\n","\n","# Construir el modelo GRU\n","vocab_size = len(vocab)\n","embedding_dim = 128  # Dimensiones de embeddings\n","gru_units = 512  # Unidades de GRU\n","\n","model = Sequential([\n","    Embedding(vocab_size, embedding_dim, input_length=sequence_length),\n","    GRU(gru_units, return_sequences=True),\n","    Dropout(0.2),  # Dropout moderado\n","    GRU(gru_units),\n","    Dropout(0.2),\n","    Dense(vocab_size, activation='softmax')\n","])\n","\n","# Compilar el modelo\n","model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","# Añadir callback para guardar el modelo con el mejor rendimiento\n","checkpoint = ModelCheckpoint('best_model.keras', monitor='loss', save_best_only=True)\n","\n","# Entrenamiento largo, con más épocas y callback\n","print(\"Entrenando el modelo... Esto puede tardar un rato.\")\n","model.fit(X, y, epochs=50, batch_size=128, verbose=1, callbacks=[checkpoint])\n","\n","# Función para generar texto con temperatura\n","def generate_text(model, start_sequence, max_words=100, temperature=1.0):\n","    input_sequence = [word_to_idx[word] for word in start_sequence.split() if word in word_to_idx]\n","    generated = start_sequence\n","\n","    for _ in range(max_words):\n","        input_padded = tf.keras.preprocessing.sequence.pad_sequences([input_sequence], maxlen=sequence_length)\n","        predictions = model.predict(input_padded, verbose=0).flatten()\n","        predictions = np.log(predictions + 1e-9) / temperature\n","        probabilities = np.exp(predictions) / np.sum(np.exp(predictions))\n","        predicted_idx = np.random.choice(len(probabilities), p=probabilities)\n","        predicted_word = idx_to_word[predicted_idx]\n","\n","        generated += ' ' + predicted_word\n","        input_sequence.append(predicted_idx)\n","        input_sequence = input_sequence[1:]\n","\n","        # Finalizar si se alcanza un final lógico\n","        if predicted_word in ['.', '!', '?']:\n","            break\n","\n","    return generated\n","\n","# Interactuar con el modelo sin preguntar la longitud\n","print(\"¡Puedes comenzar a interactuar con el modelo!\")\n","while True:\n","    prompt = input(\"Introduce el inicio del texto (o escribe 'salir' para terminar): \")\n","    if prompt.lower() == 'salir':\n","        print(\"¡Hasta luego!\")\n","        break\n","    print(\"Respondiendo...\")\n","    print(generate_text(model, prompt, max_words=100, temperature=0.8))\n"]}]}